                    2Материалы к лекциям по курсу
                       2"ОПЕРАЦИОННЫЕ СИСТЕМЫ"
              для студентов 2-го курса специальности
   "Информационные системы" факультета информационных технологий
     (РГПУ им. А.И.Герцена, весенний семестр 2005/2006 уч.год)

 ш1.0
        1Многие программисты  хотят  писать операционные системы,  но
        1даже не приступают к этому, т.к. знают, что это большой про-
        1ект.  Игнорируя эту проблему, я избавился от тормозов, кото-
        1рые ограничивали свободу моих действий,  не давая мне совер-
        1шать  глупости.  Если бы я имел представление обо всём этом,
        1то ни за что не начал бы писать Linux.  Но с другой стороны,
        1если бы я знал,  насколько это весёлое занятие и какой успех
        1оно мне принесёт, то обязательно повторил бы всё сначала. 0
                                                     1Линус Тордвальс
 ш1.2

   Изучение структуры  операционных  систем  и механизмов их работы
необходимо по следующим причинам [Одинцов,2004,с.455]:
 ш1.1
   (1) операционная система - это  1большая и очень сложная  програм-
 1ма 0, на примере которой можно изучать вопросы создания сложных прог-
раммных продуктов;
   (2) основные идеи,  концепции и алгоритмы, лежащие в основе опе-
рационных систем,  применимы ко другим областям программирования, и
особенно к системному программированию;
   (3) многочисленные программные продукты (например,  системы  уп-
равления базами  данных)  могут  рассматриваться как  1надстройки над
 1операционными системами 0.

 ш1.2
              3О концепциях курса "Операционные системы"
   1. Курс "Операционные системы" может не опираться на умение сту-
дентов программировать  на  языке программирования высокого уровня,
т.е. быть чисто описательным. Алгоритмы курса излагаются на выбран-
ном преподавателем метаязыке.
   2. Курс "Операционные системы" может опираться на умение студен-
тов программировать  на языке C (с использованием функций стандарт-
ной библиотеки для работы с файлами и строками).
   3. Большинство учебных книг,  посвящённых операционным системам,
в теории сильнее,  чем на практике,  однако  книга  [Таненбаум,Вуд-
халл,2006] в этом смысле более сбалансирована: подробно излагаются
теоретические основы,  но в то же время обсуждается  и  конкретная,
Unix-совместимая  операционная  система MINIX и приводится копия её
исходных кодов.  Это позволяет не только  изучать  основополагающие
принципы,  но и видеть (на лабораторных работах),  как эти принципы
применяются в реальных операционных системах.
    3Замечания.
 ш1.1
    21. 0 Установка MINIX на PC, как для индивидуального использования,
так и для проведения лабораторной практики,  -  простой  последова-
тельный  процесс.  Для этого нужно выделить на жёстком диске раздел
объёмом не менее 80 Мбайт и следовать инструкциям из README.TXT.
    22. 0 (По [Одинцов,2004,с.460]) Ещё одним примером учебной операци-
онной  системы  является  операционная  система NACHOS (Not Another
Completely Heuristic Operating System),  первая версия которой была
создана У.Кристофером, С.Проктером и Т.Андерсоном в январе 1992 г.
   Эта операционная система используется практически во  всех  уни-
верситетах мира  при  выполнении студентами самостоятельных заданий
по существующему учебному курсу.

 ш1.2
                  3Структура вычислительной системы
    _ 1Вычислительная система . 0  -  это  совокупность  одного  или  более
компьютера или процессора, программного обеспечения и периферийного
оборудования,  организованная для совместного выполнения информаци-
онно-вычислительных процессов.
   Из чего состоит любая  1вычислительная система 0?
   В первую очередь,  из  _ 1технического обеспечения . 0 ( 1hardware 0):  про-
цессор, память, монитор, дисковые устройства и т.д., обычно объеди-
ненные магистральным соединением, которое называется  _ 1шиной . 0.
   Во вторую очередь - из  _ 1программного обеспечения . 0. Всё программное
обеспечение принято делить на две части:  1прикладное 0 и  1системное 0.
   К  _ 1прикладному программному обеспечению . 0,  как правило,  относятся
разнообразные банковские и прочие business-программы, игры, тексто-
вые процессоры, и т.п.
   Под  _ 1системным  программным обеспечением . 0 обычно понимают програм-
мы,  способствующие функционированию и разработке прикладных  прог-
рамм. Необходимо  сказать,  что  деление  на прикладное и системное
программное обеспечение является отчасти условным и зависит от  то-
го,  кто осуществляет такое деление. Так, обычный пользователь, не-
искушённый в программировании, может считать Microsoft Word систем-
ной программой,  а с точки зрения программиста это приложение. Ком-
пилятор языка С для обычного программиста это системная  программа,
а для системного - прикладная.
   Несмотря на эту нечёткую грань,  эту ситуацию можно отобразить в
виде последовательности слоев программного обеспечения компьютерной
системы:
 ш1.0

   ┌──────────────┐
   │  3Пользователь 0 │
   └────── 7% 0───────┘                            4┐
   ┌────── 7^ 0───────────────┐                   │
   │ Прикладные программы │                   │
   └────── 7% 0───────────────┘        4┐ 0           │
   ┌────── 7^ 0─────────────────────┐ │           │ 1 Программное
   │ Прочие системные программы │ │           │ 1 обеспечение
   └────── 7% 0─────────────────────┘ │ 1 Системные 0 │
   ┌────── 7^ 0───────────────┐       │ 1 программы 0 │
   │ Операционная система │       │           │
   └────── 7% 0───────────────┘       │           │
   ┌────── 7^ 0──────────────────┐     4┘ 0            4┘
   │  3Техническое обеспечение 0 │
   │ (железо, hardware)      │
   └─────────────────────────┘

 ш1.2
   Операционная система является фундаментальным  компонентом  сис-
темного программного обеспечения. Слой операционных систем является
основным предметом настоящего курса лекций.

    2Часть I. ВВЕДЕНИЕ

   Есть хорошая традиция начинать учебный курс с определения  пред-
мета, которому он посвящён.  К сожалению, автору неизвестно хороше-
го,  общепринятого и приемлемо краткого определения понятия " 1опера-
 1ционная система 0".  Далее попытаемся дать это определение через спи-
сок функций,  которые на неё обычно возлагаются, но необходимо пом-
нить,  что многие из программных продуктов, предлагаемых на рынке в
качестве операционных систем,  не выполняют некоторые из этих функ-
ций.
   Дополнительную путаницу  вносит  то  обстоятельство,  что в наше
время всё менее и менее понятным становится ответ на вопрос, что же
такое " 1компьютер 0". Определение, согласно которому  1компьютер 0 состоит
из  системного блока,  монитора,  клавиатуры и манипулятора "мышь",
естественно,  никуда не годится - под него не подходят даже  порта-
тивные  компьютеры или монтируемые в стойку серверы с IBM-совмести-
мой архитектурой.  Если же попытаться определить компьютер как уст-
ройство,  имеющее где-то внутри полностью программируемый процессор
фон-неймановской архитектуры, то в число "компьютеров" попадёт нео-
жиданно много устройств.
   В наше время  1компьютером 0 в указанном выше смысле может оказаться
практически  любое  устройство,  включаемое в розетку и/или имеющее
автономный источник электропитания.  (См. следующую шутку:  1истреби-
 1тель 0  - это специализированное периферийное устройство для программ
управления огнём.)
   Многие из  этих  компьютеров  работают  под управлением того или
иного продукта, позиционируемого на рынке как операционные системы:
QNX, VxWorks  и др.  Существуют программы,  разработанные полностью
самостоятельно, без использования чужого кода,  но некоторые их мо-
дули также  называются операционными системами.  Бывает и так,  что
отдельные подсистемы программного комплекса,  не называясь операци-
онной системой, всё-таки являются ею.
   Возникают анекдотические ситуации,  когда разработчик пишет свою
собственную операционную систему, не подозревая об этом. Это случа-
ется не только при разработке встраиваемых приложений, но и при на-
писании  программ (особенно многопоточных и требовательных к ресур-
сам) для компьютеров и операционных систем общего назначения.
                    3О способах описания объектов
   Любой объект может быть описан с разных сторон; он может иметь:
 ш1.1
   (1)  _ 1внешнее описание . 0 - как выглядит объект и для чего  он  расс-
матривается либо применяется;
   (2)  _ 1структурное описание . 0,  характеризующее объект через его ком-
поненты;
   (3)  _ 1функциональное . 0 - описывающее действие каждого компонента;
   (4)  _ 1атрибутивное  описание . 0  -  определяющее  зависимость   между
структурным и функциональным описанием объекта;
   (5)  _ 1холистическое . 0  - описывающее действие объекта как целого при
его функционировании;
   (6)  _ 1генетическое описание . 0 - раскрывающее  возникновение,  проис-
хождение объекта.

 ш1.2
   Разумеется, что любое описание некоторого объекта является сово-
купностью приведённых описаний.

                   3Понятие "операционная система"

 ш1.0
                           1Когда я играю со своей кошкой, кто знает:
                           1я ли её дрессирую, или она меня? 0
                                                      1Мишель Монтень
 ш1.2

   Большинство пользователей имеет значительный  опыт  эксплуатации
операционных  систем,  но  тем не менее они затрудняются дать этому
понятию точное  определение.  Поэтому существует много точек зрения
на смысл понятия " 1операционная система 0".  Невозможно дать ей  адек-
ватное строгое определение.  Нам проще сказать не что является опе-
рационной системой, а для чего она нужна и что она делает.
    2Определение 0 ( 1описательное 0) 2.
 ш1.1
    2(1) 0 [Карпов,Коньков,2004,с.15]  _ 1Операционная система . 0 - это  прог-
рамма, которая обеспечивает возможность рационального использования
оборудования компьютера удобным для пользователя образом.
    2(2) 0 (Цит.  по  [Одинцов,2004,с.455])   _ 1Операционная система . 0 - это
часть программного обеспечения,  выступающая в качестве  интерфейса
между приложениями (и пользователями) и аппаратурой компьютера.

 ш1.2
   Далее кратко рассмотрим основные точки зрения.
    21. 0  _ 1Операционная система - это виртуальная машина . 0.
   При разработке  операционных  систем широко применяется абстрак-
ция,  которая является важным методом упрощения и  позволяет  скон-
центрироваться на взаимодействии высокоуровневых компонентов систе-
мы, игнорируя детали их реализации.
   Архитектура большинства компьютеров на  уровне  машинных  команд
очень неудобна для использования прикладными программами.
   Например, работа с диском предполагает знание  внутреннего  уст-
ройства его  электронного компонента - контроллера для ввода команд
вращения диска,  поиска и форматирования дорожек,  чтения и  записи
секторов и т.д.
   Ясно, что средний программист не в состоянии учитывать все  осо-
бенности работы  оборудования  (в  современной терминологии - зани-
маться разработкой драйверов устройств), а должен иметь простую вы-
сокоуровневую абстракцию, скажем, представляя информационное прост-
ранство диска как набор файлов. Файл можно открывать для чтения или
записи, использовать  для получения или сброса информации,  а потом
закрывать. Это концептуально проще,  чем заботиться о деталях пере-
мещения головок диска или организации работы мотора.
   Аналогичным образом с помощью простых и ясных абстракций скрыва-
ются от  программиста все ненужные подробности организации прерыва-
ний, работы таймера, управления памятью и т.д.
   Более того,  на современных вычислительных комплексах можно соз-
дать  иллюзию  неограниченного  размера  оперативной памяти и числа
процессоров. Всем этим занимается операционная система.
   Для конкретизации воспользуемся важным понятием.
    2Определение.
 ш1.1
    2(1) 0  _ 1Машина . 0 ( 1в программировании 0) - это разговорный термин,  обоз-
начающий конкретную архитектуру компьютера.
    2(2) 0  _ 1Виртуальная машина . 0 -  это  вычислительная  система  заданной
конфигурации, моделируемая для пользователя программными и аппарат-
ными средствами конкретного реально существующего компьютера.

 ш1.2
   Теперь можно утверждать,  что операционная система предоставляет
пользователю-программисту  вместо  реальной  аппаратуры  компьютера
расширенной  1виртуальной машины 0, с которой удобно работать.
   Операционная система  является  тем слоем программного обеспече-
ния, который преобразует аппаратную машину в виртуальную.  При этом
конфигурация виртуальной машины может существенно отличаться от ре-
альной.
   Таким образом,  операционная система представляется пользователю
 1виртуальной машиной 0, с которой проще иметь дело, чем непосредствен-
но с оборудованием компьютера.
    3Замечание 0 [Одинцов,2004,с.456] 3.
 ш1.1
   Образно говоря,  основной функцией операционной системы является
чародейство - превращение системы в нечто большее,  чем есть на са-
мом деле.  Например, операционная система может создать иллюзию од-
новременного исполнения нескольких программ на одном компьютере.
   В итоге  пользователь воспринимает виртуальную машину как компь-
ютер, имеющий архитектуру, отличную от реально существующей.

 ш1.2
    22. 0  _ 1Операционная система - это менеджер ресурсов . 0.
    2Определение.
 ш1.1
    2(1) 0  _ 1Менеджмент . 0 - это:
   (а) эффективное  и производительное достижение целей организации
посредством планирования,  организации,  лидерства (руководства)  и
контроля над организационными ресурсами;
   (б) умение добиваться поставленных целей, использовать труд, ин-
теллект, мотивы поведения других людей;
   (в) область человеческого знания,  помогающего  осуществить  эту
функцию.
    2(2) 0  _ 1Менеджмент . 0 - это эффективное управление за счёт рационально-
го распределения ресурсов.

 ш1.2
   Операционная система предназначена для управления всеми  частями
весьма сложной архитектуры компьютера.
   Представим, к примеру,  что произойдёт, если несколько программ,
работающих  на  одном компьютере,  будут пытаться одновременно осу-
ществлять вывод на принтер.  Мы получим мешанину строчек и страниц,
выведенных различными программами.  Операционная система предотвра-
щает такой хаос за счёт  1буферизации информации 0, предназначенной для
печати,  на диске и организации очереди на печать. Для многопользо-
вательских компьютеров необходимость управления ресурсами и их  за-
щиты ещё более очевидна.
   Операционная система позволяет повысить эффективность  использо-
вания компьютера за счёт рационального управления его  1ресурсами 0.
    _ 1Ресурсы операционной системы . 0 можно разделить на две группы:
 ш1.1
   -  1программные ресурсы 0 (процессы, виртуальное адресное пространс-
тво, подсистема ввода-вывода или файловая система);
   -  1аппаратные ресурсы 0 (процессоры, память, устройства ввода-выво-
да, дисковая память).

 ш1.2
   При этом практически каждому аппаратному  ресурсу  соответствует
некоторый программный ресурс, тесно с ним связанный.
   Следовательно, операционная система как менеджер ресурсов,  осу-
ществляет упорядоченное и контролируемое распределение процессоров,
памяти и других ресурсов между различными программами.
    23. 0  _ 1Операционная система - это защитник пользователей и программ . 0.
   Если вычислительная система допускает совместную работу несколь-
ких пользователей,  то возникает проблема организации их безопасной
деятельности.  Необходимо обеспечить сохранность информации на дис-
ке, чтобы никто не мог удалить или повредить чужие файлы.
   Нельзя разрешить программам одних пользователей произвольно вме-
шиваться в работу программ других  пользователей.  Нужно  пресекать
попытки несанкционированного использования вычислительной системы.
   Всю эту деятельность осуществляет операционная система как орга-
низатор безопасной работы пользователей и их программ. С такой точ-
ки зрения операционная система представляется системой безопасности
некоторого "государства",  на  которую  возложены  "полицейские"  и
"контрразведывательные" функции.
    24. 0  _ 1Операционная система - это постоянно функционирующее ядро . 0.
    2Определение.
 ш1.1
    _ 1Операционная система . 0 - это программа,  постоянно  работающая  на
компьютере и взаимодействующая со всеми прикладными программами.

 ш1.2
   Однако во многих современных операционных системах постоянно ра-
ботает на компьютере лишь часть операционной системы,  которую при-
нято называть  _ 1ядром операционной системы . 0.
    2Определение 0 [Одинцов,2004,с.456] 2.
 ш1.1
    _ 1Ядро операционной системы . 0 - это модули,  постоянно работающие на
компьютере и выполняющие основные функции операционной системы. Эти
модули обычно поддерживают управление процессами, памятью, устройс-
твами  ввода-вывода.  Код  ядра  операционной системы исполняется в
 1привилегированном режиме 0 работы процессора.

 ш1.2
    3Замечание 0 [Флёнов,2005,с.37-38] 3.
 ш1.1
    1Ядро 0 -  это  сердце операционной системы,  в котором реализовано
управление физическими и программными ресурсами компьютера.  Помимо
этого она позволяет получить доступ к различному железу.  Например,
ранние версии ядра Linux обеспечивали работу только  двух  USB-уст-
ройств: клавиатура и мышь. Начиная с версии 2.4, встроена поддержка
USB-видеокамер, принтеров и других устройств.
   Номер версии ядра Linux состоит из трёх чисел:
 ш1.1
   (1) первое (старший номер) - указывает на значительные изменения
в ядре;
   (2) второе (младший номер) - характеризует  появление  небольших
изменений. По нему можно определить,  является ядро проверенным или
предназначено для тестирования и нет уверенности, что оно не содер-
жит ошибок. Если число  1чётное 0, то ядро прошло тщательное тестирова-
ние. В противном случае установка данной версии не гарантирует ста-
бильной работы;
   (3) третье - номер очередного  1рабочего релиза 0 ( _ 1сборки . 0).  В неко-
торых случаях это число опускают.

 ш1.1
   Вы должны  самостоятельно обновлять ядро или помогать в тестиро-
вании нестабильных версий.  Обновление ядра позволяет не только по-
лучить новые  возможности по работе с железом,  повысить производи-
тельность системы,  но и исправить некоторые ошибки,  которые  есть
всегда и везде.  Самое главное, что обновление ядра в Linux не вле-
чёт за собой переконфигурирования всей  операционной  системы,  как
это происходит в некоторых других системах.

 ш1.2
                    3Поколения операционных систем
   Принято выделять следующие исторические  поколения  операционных
систем [Одинцов,2004,с.457; Карпов,Коньков,2004,с.16-24]:
 ш1.0

   (1)  _ 1нулевое  поколение . 0 (период с момента появления первых компь-
ютеров до середины 50-х годов XX века).
   В первых компьютерах операционные системы отсутствовали;

   (2)  _ 1первое поколение . 0 (появилось в середине 50-х гг. XX века).
   Пакетные операционные системы;

   (3)  _ 1второе поколение . 0 (появилось в середине 60-х гг. XX века).
   Мультипрограммные операционные   системы.  Операционные  системы
разделения времени. Операционные системы реального времени;

   (4)  _ 1третье поколение . 0 (появились в начале 80-х гг. XX века).
   Операционные системы для персональных компьютеров.  Сетевые опе-
рационные системы;

   (5)  _ 1четвёртое поколение . 0 (появились в начале 90-х гг. XX века).
   Распределённые операционные системы.

 ш1.2
                   3Архитектура операционных систем
   До сих пор мы говорили о взгляде на операционные системы  извне,
т.е. о том,  _ 1что делают операционные системы . 0. (В дальнейшем наш курс
будет посвящён тому,  _ 1как операционные системы это делают . 0.)
   Теперь же мы рассмотрим варианты внутреннего строения операцион-
ных систем, опираясь на следующее
    _ 1Концептуальное положение . 0.
 ш1.1
    1Архитектура ядра 0 в значительной степени влияет на всю  1архитекту-
 1ру операционной системы 0.

 ш1.2
    2Определение 0 [Першиков,Савинков,1995] 2.
 ш1.1
    _ 1Архитектура . 0 - это  1концепция взаимосвязи элементов сложной струк-
 1туры 0,  которая  включает компоненты логической,  физической и прог-
раммной структур.

 ш1.2
   Рассмотрим классификацию операционных систем по типу архитектуры
ядра системы.
    21. 0  _ 1Монолитное ядро . 0.
   По сути дела,   1операционная система 0 - это  обычная  компьютерная
программа,  поэтому  было бы логично и организовать её так же,  как
устроено большинство программ,  т.е.  составить из процедур и функ-
ций.  В этом случае компоненты операционной системы являются не са-
мостоятельными модулями,  а составными частями одной большой  прог-
раммы.  Такая  структура операционной системы называется  _ 1монолитным
 _ 1ядром . 0. Монолитное ядро представляет собой набор процедур, каждая из
которых может вызвать каждую. Все процедуры работают в  1привилегиро-
 1ванном режиме 0.
   Таким образом,  _ 1монолитное ядро . 0 - это структура операционной сис-
темы, при которой все её компоненты являются составными частями од-
ной программы,  используют общие структуры данных и взаимодействуют
друг с другом путём непосредственного вызова процедур. Для монолит-
ной операционной системы ядро совпадает со всей системой.
   Во многих  операционных  системах с монолитным ядром  _ 1сборка ядра
(т.е. его компиляция) осуществляется отдельно для каждого компьюте-
ра, на который устанавливается операционная система. При этом можно
выбрать список оборудования и программных протоколов, поддержка ко-
торых будет включена в ядро.  Так как ядро является единой програм-
мой, перекомпиляция - это единственный способ добавить в него новые
компоненты или исключить неиспользуемые.
   Следует отметить,  что  присутствие  в  ядре  лишних компонентов
крайне нежелательно,  т.к.  ядро всегда полностью  располагается  в
оперативной памяти. Кроме того, исключение ненужных компонентов по-
вышает надёжность операционной системы в целом.
   Монолитное ядро  - это старейший способ организации операционных
систем. Примером систем с  монолитным  ядром  является  большинство
Unix-систем.
    3Замечание 0 [Флёнов,2005,с.479] 3.
 ш1.1
   С недавних пор ядро Lunix стало модульным.  Это  удобно,  потому
что позволяет получить новые возможности,  просто подгрузив необхо-
димый программный блок.  Если раньше для этого требовалось переком-
пилировать ядро, то теперь всего несколько команд, и всё готово.

 ш1.2
   Схематично  _ 1структуру монолитного ядра . 0 можно изобразить следующим
образом [Одинцов,2004,с.464]:
 ш1.0

     4┌ 0────────────────────────── 4┐
    │  3Приложение пользователя 0  │  1Непривилегированный режим
     4└ 0────────────┬───────────── 4┘
                 │
   ╔═════════════│══════════════╗
   ║    ┌──────── 7^ 0─────────┐    ║
   ║    │  3Системные службы 0 │    ║  1Привилегированный режим
   ║    └─┬──────────────┬─┘    ║
   ║  4┌ 0──── 7^ 0──── 4┐ 0     4┌ 0──── 7^ 0──── 4┐ 0 ║
   ║ │Процесс А│ 75 0── 76 0│Процесс Б│ ║
   ║  4└ 0──── 7% 0──── 4┘ 0     4└ 0──── 7% 0──── 4┘ 0 ║
   ║      │   4┌ 0───────── 4┐ 0 │      ║ 3 Операционная система
   ║       4└ 0─ 76 0│Процесс В│ 75 4┘ 0      ║
   ║       4┌ 0─ 76 0│         │ 75 0─ 4┐ 0     ║
   ║      │   4└ 0────┬──── 4┘ 0  │     ║
   ║  4┌ 0──── 7^ 0──── 4┐ 0  │   4┌ 0──── 7^ 0──── 4┐ 0║
   ║ │Процесс А│ 75 0─│─ 76 0│Процесс Б│║
   ║  4└ 0───────── 4┘ 0  │   4└ 0───────── 4┘ 0║
   ╚══════════════│═════════════╝
                  │
             4┌ 0───── 7^ 0───── 4┐
            │  3Процессор 0 │
             4└ 0─────────── 4┘

 ш1.2
    3Замечание 2.
 ш1.1
   Даже в монолитных системах можно выделить некоторую структуру.
   В монолитном  ядре  выделяются  "вкрапления" сервисных процедур,
соответствующих системным вызовам.
    _ 1Сервисные процедуры . 0 выполняются в привилегированном режиме, тог-
да как пользовательские программы - в непривилегированном.  Для пе-
рехода  с одного уровня привилегий на другой иногда может использо-
ваться главная сервисная программа, определяющая, какой именно сис-
темный вызов был сделан,  корректность входных данных для этого вы-
зова и передающая управление соответствующей сервисной процедуре  с
переходом в привилегированный режим работы.
   Иногда выделяют также набор  _ 1программных утилит . 0, которые помогают
выполнять сервисные программы.

 ш1.2
    22. 0  _ 1Многоуровневые . 0 ( _ 1слоистые . 0)  _ 1операционные системы . 0.
   Продолжая структуризацию,  можно разбить всю вычислительную сис-
тему на ряд более мелких уровней  с  хорошо  определёнными  связями
между ними, так чтобы объекты уровня N могли вызывать только объек-
ты уровня N-1.  Нижним уровнем в  таких  системах  обычно  является
hardware, верхним  уровнем - интерфейс пользователя.  Чем ниже уро-
вень, тем более привилегированные команды и действия  может  выпол-
нять модуль, находящийся на этом уровне.
    3Замечание.
 ш1.1
   Впервые такой подход  был  применён  при  создании  системы  THE
Э.Дейкстрой и его студентами в 1968 г.  Эта система имела следующие
уровни
 ш1.0

   ┌───┬────────────────────────────────────┐
   │ 5 │ Интерфейс пользователя             │
   ├───┼────────────────────────────────────┤
   │ 4 │ Управление вводом-выводом          │
   ├───┼────────────────────────────────────┤
   │ 3 │ Драйвер устройства связи оператора │
   │   │ и консоли                          │
   ├───┼────────────────────────────────────┤
   │ 2 │ Управление памятью                 │
   ├───┼────────────────────────────────────┤
   │ 1 │ Планирование задач и процессов     │
   ├───┼────────────────────────────────────┤
   │ 0 │  1Hardware 0                           │
   └───┴────────────────────────────────────┘

 ш1.2
   Слоистые операционные системы хорошо реализуются.  При использо-
вании операций нижнего слоя не нужно знать,  как  они  реализованы,
нужно лишь понимать, что они делают. Слоистые системы хорошо тести-
руются.  Отладка начинается с нижнего слоя и  проводится  послойно.
При возникновении ошибки мы можем быть уверены, что она находится в
тестируемом слое.
   Слоистые операционные системы хорошо модифицируются. При необхо-
димости можно заменить лишь один слой, не трогая остальные. Но сло-
истые  системы  сложны для разработки:  тяжело правильно определить
порядок слоёв и что к какому слою относится.
   Слоистые операционные системы менее эффективны, чем монолитные.
   Например, для выполнения операций ввода-вывода программе пользо-
вателя  придётся  последовательно проходить все слои от верхнего до
нижнего.
   Схематично  _ 1структуру слоистого ядра . 0 можно  изобразить  следующим
образом [Одинцов,2004,с.464]:
 ш1.0

     4┌ 0────────────────────────── 4┐
    │  3Приложение пользователя 0  │  1Непривилегированный режим
     4└ 0───────────┬────────────── 4┘
                │
   ╔════════════│══════════════════╗
   ║  ┌───────── 7^ 0────────┐         ║
   ║  │  3Системные службы 0 │         ║  1Привилегированный режим
   ║  └────────┬─────────┘         ║
   ║   4┌ 0──────── 7^ 0───────── 4┐ 0         ║
   ║  │Управление файлами│         ║
   ║   4└ 0─────────────┬──── 4┘ 0         ║
   ║            4┌ 0──── 7^ 0───────────── 4┐ 0║
   ║           │Управление памятью│║  3Операционная система
   ║            4└ 0────────────────┬─ 4┘ 0║
   ║       4┌ 0─────────────────── 4┐ 0 │  ║
   ║      │Управление устрой- │ │  ║
   ║      │ствами ввода-вывода│ │  ║
   ║       4└ 0─────┬───────────┬─ 4┘ 0 │  ║
   ║ 4┌ 0─────────── 7^ 0───────── 4┐ 0 │   │  ║
   ║│Управление процессами│ │   │  ║
   ║ 4└ 0───────────┬───────── 4┘ 0 │   │  ║
   ╚════════════│═══════════│═══│══╝
                │           │   │
           4┌ 0───── 7^ 0─────────── 7^ 0─── 7^ 0─ 4┐
          │        3Процессор 0       │
           4└ 0─────────────────────── 4┘

    23. 0  _ 1Виртуальные машины . 0.

                                        1И обнаружил микроскоп
                                        1Что на клопе бывает клоп,
                                        1Питающийся паразитом.
                                        1На нём другой, ad infinitum.
                                                            1Дж.Свифт
 ш1.2

   Вначале мы говорили о взгляде на  операционную  систему  как  на
виртуальную машину,  когда пользователю нет необходимости знать де-
тали внутреннего устройства компьютера. Он работает с файлами, а не
с магнитными головками и двигателем;  он работает с огромной вирту-
альной, а не ограниченной реальной оперативной  памятью;  его  мало
волнует, единственный он на машине пользователь или нет.
   Существует концепция построения операционных систем,  называемая
 _ 1концепцией системы виртуальных машин . 0.  Такие  операционные  системы
допускают одновременную  работу нескольких полноценных операционных
систем, создавая иллюзию того,  что компьютер находится в их полном
распоряжении. Рассмотрим этот подход подробнее.
   Пусть операционная система реализует виртуальную машину для каж-
дого пользователя,  но не упрощая ему жизнь, а, наоборот, усложняя.
Каждая такая виртуальная машина предстаёт перед  пользователем  как
"голое"  железо  -  копия  всего hardware в вычислительной системе,
включая процессор, привилегированные и непривилегированные команды,
устройства ввода-вывода, прерывания и т.д. И он остаётся с этим же-
лезом один на один.
   При попытке  обратиться  к  такому виртуальному железу на уровне
привилегированных команд в действительности,  происходит  системный
вызов реальной операционной системы, которая и производит необходи-
мые действия. Такой подход позволяет  1каждому пользователю загрузить
 1свою операционную систему на виртуальную машину 0.
   Схематично изобразим  вариант  виртуальной  машины [Карпов,Конь-
ков,2004,с.29], использующей понятие " 1экзоядро 0".
    2Определение 0 (по [Таненбаум,2006,с.85]) 2.
 ш1.1
    _ 1Экзоядро . 0 - это программа,  работающая в режиме  ядра  на  нижнем
уровне, в  задачу которого входит распределение ресурсов для вирту-
альных машин,  а после этого проверка их использования (т.е. отсле-
живание попыток машин использовать чужой ресурс).
 ш1.0

   ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐
   │ 1Программа пользо- 0│ │ 1Программа пользо- 0│ │ 1Программа пользо- 0│
   │ 1вателя            0│ │ 1вателя            0│ │ 1вателя            0│
   └─────── 7% 0─────────┘ └──────── 7% 0────────┘ └─────── 7% 0─────────┘
           │                    │                  │
       ┌─── 7^ 0────┐           ┌─── 7^ 0───┐        ┌───── 7^ 0──────┐
       │ MS DOS │           │ Linux │        │ Windows-NT │
       └─── 7% 0────┘           └─── 7% 0───┘        └───── 7% 0──────┘
           │                    │                  │
     ┌───── 7^ 0───────┐     ┌────── 7^ 0──────┐     ┌───── 7^ 0───────┐
     │  1Виртуальное 0 │     │  1Виртуальное 0 │     │  1Виртуальное 0 │
     │  1hardware    0 │     │  1hardware    0 │     │  1hardware    0 │
     └────────── 7% 0──┘     └────── 7% 0──────┘     └── 7% 0──────────┘
                │               │               │
          ╔═════ 7^ 0═══════════════ 7^ 0═══════════════ 7^ 0════╗
          ║  1Реальная операционная система 0 ( 1экзоядро 0) ║
          ╚═════════════════════ 7% 0════════════════════╝
                                │
                      ┌───────── 7^ 0─────────┐
                      │ Реальное hardware │
                      └───────────────────┘

 ш1.2
    1Недостатком 0 таких операционных систем является  снижение  эффек-
тивности виртуальных машин по сравнению с реальным компьютером (как
правило, они очень громоздки).
    1Преимущество 0 же  заключается  в  использовании на одной вычисли-
тельной системе программ,  написанных для разных операционных  сис-
тем.
    3Замечание 0 [Таненбаум,2006,с.85] 3.
 ш1.1
   Идея виртуальной  машины  очень  часто используется в наши дни 3  0в
несколько другом контексте:  для работы  1старых программ 0, написанных
для системы MS DOS на Pentium (или на других 32-разрядных процессо-
рах Intel).  При разработке компьютера Pentium и  его  программного
обеспечения обе компании,  Intel и Microsoft, понимали, что возник-
нет острая потребность в работе старых программ на новом оборудова-
нии.  Поэтому  корпорация Intel создала на процессоре Pentium  _ 1режим
 _ 1виртуального процессора 8086 . 0,  в котором машина действует как  8086
(которая  с  точки зрения программного обеспечения идентична 8088),
включая 16-разрядную адресацию памяти с ограничением объёма  памяти
в 1 Мбайт.
   Такой режим используется системой Windows и другими операционны-
ми системами для запуска программ MS DOS.  Программы запускаются  в
режиме виртуального процессора 8086. Пока они выполняют обычные ко-
манды, они работают напрямую с оборудованием.  Но  когда  программа
пытается обратиться  по  прерыванию  к операционной системе,  чтобы
сделать  1системный вызов 0, или пытается напрямую осуществить ввод-вы-
вод данных, происходит прерывание с переключением на монитор вирту-
альной машины.
   Кроме того,  виртуальные машины используются,  правда, несколько
другим способом,  для работы программ Java.  когда  корпорация  Sun
Microsystems придумала язык программирования Java, она также разра-
ботала виртуальную машину (т.е. архитектуру компьютера), называемую
 _ 1JVM . 0  ( 1Java  Virtual Machine 0 - виртуальная машина Java).  Компилятор
Java выдаёт код для JVM, который затем обычно выполняется программ-
ным интерпретатором JVM.
   Преимущество этого подхода заключается в том,  что код JVM можно
передавать через Internet на любой компьютер, имеющий интерпретатор
JVM, и запускать там.  Если бы компилятор выдавал двоичные програм-
мы, например, для компьютеров SPARC или Pentium,  их было бы нельзя
куда-либо передать и запустить в работу так просто,  как это проис-
ходит с JVM.  (Конечно,  компания Sun могла бы разработать компиля-
тор, который выдавал бы двоичные коды SPARC,  и затем  использовать
интерпретатор SPARC, но структура JVM намного проще для интерпрета-
ции). Другое преимущество JVM заключается в том,  что когда интерп-
ретатор реализован должным образом, что вовсе не тривиально, прихо-
дящие JVM-программы можно проверить в целях  безопасности  и  затем
запустить в защищённой среде, так что эти программы не смогут похи-
тить данные или причинить какой-нибудь иной вред.
    24. 0  _ 1Микроядерная архитектура . 0.
 ш1.0

                                        1Маленькое есть прекрасное...

 ш1.2
   Современная тенденция в разработке операционных систем состоит в
перенесении значительной части системного кода на уровень пользова-
теля и одновременной минимизации ядра.  Речь идёт о подходе к пост-
роению ядра, называемом  _ 1микроядерной архитектурой операционной сис-
 _ 1темы . 0, когда большинство её составляющих  являются  самостоятельными
программами. В  этом  случае взаимодействие между ними обеспечивает
специальный модуль ядра, называемый  _ 1микроядром . 0.
   Микроядро работает  в   1привилегированном  режиме 0  и обеспечивает
взаимодействие между программами,  планирование использования  про-
цессора, первичную  обработку  прерываний,  операции ввода-вывода и
базовое управление памятью.
   Остальные компоненты системы взаимодействуют друг с другом путём
передачи сообщений через микроядро.
   Изобразим схематически    1микроядерную  архитектуру  операционной
 1системы 0 [Карпов,Коньков,2004,с.30]:
 ш1.0

                                  1Операционная система
                     4┌ 0─────────────────────────────────────────── 4┐
                     4┌ 0─────────────────── 4┐ 0     ┌─────────────────┐
   ┌────────────┐   │                   │   4┌ 0─ 76 0│ 1Менеджер файловой 0│
   │Приложение A│ 75 0──│─ 4┐ 0                 │  │  │ 1системы           0│
   └────────────┘   │ │                 │  │  └─────────────────┘
                    │ │  ╔═════════╗    │  │
                    │  4└ 0─ 76 0║         ║ 75 0───│── 4┘ 0  ┌─────────────┐
                    │    ║ 3Микроядро 0║ 75 0───│──── 76 0│ 1Менеджер сети 0│
                    │  4┌ 0─ 76 0║         ║ 75 0───│── 4┐ 0  └─────────────┘
                    │ │  ╚═════════╝    │  │
   ┌────────────┐   │ │    1Привилеги 0-    │  │  ┌───────────────┐
   │Приложение B│ 75 0──│─ 4┘ 0    1рованный 0      │ 1   4└ 0─ 76 0│ 1Менеджер памяти 0│
   └────────────┘   │      1режим 0         │     └───────────────┘
                     4└ 0─────────────────── 4┘

 ш1.2
   Основным достоинством микроядерной архитектуры является  высокая
степень модульности ядра операционной системы.  Это существенно уп-
рощает добавление в него новых компонентов. В микроядерной операци-
онной системе можно,  не прерывая её работы,  загружать и выгружать
новые драйверы, файловые системы и т.д. Существенно упрощается про-
цесс  отладки  компонентов ядра,  т.к.  новая версия драйвера может
загружаться без перезапуска всей операционной системы.
   Компоненты ядра  операционной системы ничем принципиально не от-
личаются от пользовательских программ, поэтому для их отладки можно
применять обычные  средства.  Микроядерная архитектура повышает на-
дёжность системы,  поскольку ошибка на  уровне  непривилегированной
программы менее опасна, чем отказ на уровне режима ядра.
   В то же время микроядерная архитектура операционной системы вно-
сит дополнительные накладные расходы, связанные с передачей сообще-
ний, что существенно влияет на производительность.  Для того, чтобы
микроядерная операционная  система по скорости не уступала операци-
онным системам на базе монолитного ядра,  требуется очень аккуратно
проектировать разбиение системы на компоненты, стараясь минимизиро-
вать взаимодействие между ними.
   Таким образом, основная сложность при создании микроядерных опе-
рационных систем - необходимость очень аккуратного проектирования.
   Схематично  _ 1структуру микроядра . 0 можно изобразить следующим  обра-
зом [Одинцов,2004,с.464]:
 ш1.0

     4┌ 0────────────────────────── 4┐
  ┌─┤  3Приложение пользователя 0  │  1Непривилегированный режим
  │  4└ 0────────────────────────── 4┘
  │
  │                    4┌ 0────────────────── 4┐
  │                   │Управление файлами│
  │                    4└ 0────────────── 7% 0─── 4┘
  │              4┌ 0────────────────── 4┐ 0 │
  │             │Управление памятью│ │
  │              4└ 0──────────────── 7% 0─ 4┘ 0 │
  │         4┌ 0─────────────────── 4┐ 0 │   │
  │        │Управление устрой- │ │   │
  │        │ствами ввода-вывода│ │   │
  │         4└ 0───────────────── 7% 0─ 4┘ 0 │   │
  │   4┌ 0───────────────────── 4┐ 0 │   │   │
  │  │Управление процессами│ │   │   │
  │   4└ 0─────────────────── 7% 0─ 4┘ 0 │   │   │
  │                      │   │   │   │
  │        ╔═══════════╗ │   │   │   │
  │        ║           ╟─ 4┘ 0   │   │   │
   4└ 0─────── 76 0║  3Микроядро 0 ╟───── 4┘ 0   │   │  1Привилегированный режим
           ║           ╟───────── 4┘ 0   │
           ║           ╟───────────── 4┘
           ╚═════╤═════╝
                 │
            4┌ 0───── 7^ 0───── 4┐
           │  3Процессор 0 │
            4└ 0─────────── 4┘

 ш1.2
    25. 0  _ 1Смешанные . 0 ( _ 1гибридные . 0)  _ 1системы . 0.
   Все рассмотренные подходы к построению операционных систем имеют
свои достоинства и недостатки, поэтому в большинстве случаев совре-
менные операционные системы используют комбинации этих подходов.
   Приведём примеры  1смешанных операционных систем 0:
 ш1.1
   (1) ядро  операционной системы Linux представляет собой монолит-
ную систему с элементами микроядерной архитектуры.  При  компиляции
ядра разрешается  динамическая загрузка и выгрузка многих компонен-
тов ядра (называемых  _ 1модулями . 0).  В момент загрузки модуля  его  код
загружается  на уровне системы и связывается с остальной частью яд-
ра.  Внутри модуля могут использоваться любые экспортируемые  ядром
функции;
   (2) возможность запуска операционной системы с монолитным  ядром
под управлением микроядра.  Так устроены 4.4BSD и MkLinux, основан-
ные на микроядре Mach.  Микроядро обеспечивает управление виртуаль-
ной памятью и работу низкоуровневых драйверов.  Все остальные функ-
ции, в том числе взаимодействие с прикладными программами, осущест-
вляются монолитным ядром.  Данный подход сформировался в результате
попыток использования преимущества микроядерной архитектуры, сохра-
няя по возможности хорошо отлаженный код монолитного ядра;
   (3) наиболее тесно элементы микроядерной архитектуры и  элементы
монолитного  ядра  переплетены  в ядре Windows NT.  Хотя Windows NT
часто называют микроядерной операционной системой,  это  не  совсем
так.  Микроядро  NT  слишком  велико (более 1 Мбайт),  чтобы носить
приставку "микро".  Компоненты ядра Windows NT располагаются в  вы-
тесняемой памяти и взаимодействуют друг с другом путём передачи со-
общений,  как и положено в микроядерных операционных системах. В то
же время все компоненты ядра работают в одном адресном пространстве
и активно используют общие структуры данных, что свойственно опера-
ционным  системам с монолитным ядром.  По мнению специалистов фирмы
Microsoft причина проста: чисто микроядерный дизайн коммерчески не-
выгоден, поскольку неэффективен.
   Таким образом,  Windows NT можно с полным правом назвать смешан-
ной операционной системой.
 ш1.2

             3Объёмы исходных текстов операционных систем

 ш1.0
                      1Внутри каждой большой программы есть маленькая
                      1программа, старающаяся пробиться наружу. 0
                                                  1Закон Хоара (1970)
 ш1.2

   Приведём, следуя [Таненбаум,2006,с.844], объёмы исходных текстов
различных операционных систем. В первой строке каждой ячейки табли-
цы содержится версия системы,  вторая строка представляет собой ко-
личество строк исходного текста, где K=1000, а M=1000000.
 ш1.0

 ┌────╥──────────┬─────────────┬───────┬────────┬────────┬────────┐
 │Год ║   AT&T   │     BSD     │ MINIX │ Linux  │Solaris │ Win NT │
 ╞════╬══════════╪═════════════╪═══════╪════════╪════════╪════════╡
 │1976║V6 9K     │             │       │        │        │        │
 │1979║V7 21K    │             │       │        │        │        │
 │1980║          │4.1 38K      │       │        │        │        │
 │1982║SysIII 58K│             │       │        │        │        │
 │1984║          │4.2 98K      │       │        │        │        │
 │1986║          │4.3 179K     │       │        │        │        │
 │1987║SVR3 92K  │             │1.0 13K│        │        │        │
 │1989║SVR4 280K │             │       │        │        │        │
 │1991║          │             │       │0.01 10K│        │        │
 │1993║          │Free 1.0 235K│       │        │5.3 850K│3.1 6M  │
 │1994║          │4.4 Lite 743K│       │1.0 165K│        │3.5 10M │
 │1996║          │             │       │2.0 470K│        │4.0 16M │
 │1997║          │             │2.0 62K│        │5.6 1.4M│        │
 │1999║          │             │       │2.2 1M  │        │        │
 │2000║          │Free 4.0 1.4M│       │        │5.8 2.0M│2000 29M│
 └────╨──────────┴─────────────┴───────┴────────┴────────┴────────┘

 ш1.2
   Однако следует очень осторожно сравнивать различные операционные
системы в этой таблице, т.к. то, что составляет операционную систе-
му, отличается от системе к системе.
   Например, вся  оконная система и графический интерфейс пользова-
теля являются частью ядра в Windows, но не входят в ядро ни в одной
из версий системы Unix.  В них это просто пользовательский процесс.
С учётом X Windows ко всем версиям Unix добавится 1.5 млн строк ко-
да, а ведь при этом даже не учитывается исходный текст графического
интерфейса пользователя (Motif, GNOME и т.д.), который также не яв-
ляется частью операционной системы Unix.
   Кроме того,  некоторые системы содержат код для различных  архи-
тектур (например,  пять  для 4.4BSD) и девять для Linux),  при этом
каждая архитектура добавляет от 10000 до 50000 строк кода. Причина,
по которой  операционная  система FreeBSD 1.0 состоит всего лишь из
235000 строк кода,  тогда как 4BSD Lite,  от которой она произошла,
состояла из  743000 строк,  заключается в том,  что из FreeBSD была
выброшена поддержка всех устаревших архитектур (например, VAX).
   В различных системах также очень сильно разнится количество фай-
ловых систем,  драйверов устройств и поставляемых библиотек. К тому
же система Windows содержит большое количество текстового кода, ко-
торого не  содержит  Unix,  некоторые  утилиты и поддержку большого
числа других языков, помимо английского.
   Несмотря на всё вышесказанное, два вывода очевидны:
 ш1.1
   (1) распухание операционных систем неотвратимо;
   (2) система Windows значительно превосходит Unix в размерах.

 ш1.2
   Что считать  лучшим  - большие или компактные системы,  - до сих
пор остаётся предметом жарких споров.  Аргумент в пользу компактных
систем заключается в том,  что концепция небольших размеров и прин-
цип "ничего лишнего" приводит к созданию управляемых, надёжных сис-
тем,  понятных для пользователя. В пользу больших систем приводится
обычно тот аргумент, что пользователю, мол, требуется много различ-
ных функций.
    3Замечание 0 ( 1важное 0) 3.
 ш1.1
   В любом случае должно быть ясно, что студенты, планирующие напи-
сать с нуля полноценную, современную операционную систему, берут на
себя совершенно непосильную задачу.

 ш1.2
   Windows 2000 состоит приблизительно из 36 миллионов строк  прог-
раммного кода. Хотя Windows 2000 уже сейчас является чемпионом мира
в тяжёлом весе, если считать чистую массу, эта операционная система
всё продолжает расти,  ошибки устраняются, а новые функции добавля-
ются. Довольно интересен способ,  которым корпорация Microsoft  уп-
равляет разработкой операционной системы.
   Сотни программистов целый день работают над различными аспектами
Windows 2000.  Когда кусок программы закончен, программист посылает
его по сети команде сборщиков. Каждый день в 18:00 дверь закрывает-
ся, и система собирается заново (т.е.  перекомпилируется и компону-
ется). Каждая собранная таким образом версия системы  получает  по-
рядковый номер, который можно увидеть в параметрах файла
 ш1.0

   ntoskrnl.exe

 ш1.2
(первый опубликованный выпуск системы Windows 2000 имел номер 2195).
   Затем новая операционная система,  опять же по сети, распростра-
няется на  тысячи  машин  кампуса  корпорации Microsoft в Редмонде,
штат Вашингтон,  где её всю ночь подвергают интенсивному тестирова-
нию. Ранним утром следующего дня результаты тестирования рассылают-
ся соответствующим группам, чтобы они могли видеть, как работают их
новые программы.  Затем каждая группа программистов решает, над ка-
кой программой они будут работать в этот день. Затем снова наступа-
ет 18:00, и весь цикл повторяется.

                  3Классификация операционных систем

 ш1.0
                            1Гремучая змея - дружелюбная особа, но вы
                            1должны вести себя с ней 0  1правильно.
                                                       1Книга о змеях
 ш1.2

   Операционные системы  могут различаться особенностями реализации
внутренних алгоритмов  управления  основными  ресурсами  компьютера
(процессорами, памятью, устройствами), особенностями использованных
методов проектирования,  типами аппаратных платформ,  областями ис-
пользования и многими другими свойствами.
   От эффективности   алгоритмов  управления  локальными  ресурсами
компьютера во многом зависит эффективность всей сетевой  операцион-
ной  системы  в целом.  Поэтому,  характеризуя сетевую операционную
систему,  часто приводят важнейшие особенности  реализации  функций
операционных систем по управлению процессорами,  памятью,  внешними
устройствами автономного компьютера.
   Так, например, в зависимости от особенностей использованного ал-
горитма управления процессором,  операционные системы делят на мно-
гозадачные и однозадачные,  многопользовательские  и  однопользова-
тельские,  на  системы,  поддерживающие  1многонитевую обработку 0 и не
поддерживающие её, на однопроцессорные и многопроцессорные системы.
   Ниже приведена классификация ОС по нескольким наиболее  основным
признакам (по [Карпов,Коньков,2004,с.32-34]).
    21. 0  _ 1Реализация многозадачности . 0.
   По числу  одновременно  выполняемых  задач  операционные системы
можно разделить на два класса:
 ш1.1
   (а) однозадачные (MS DOS);
   (б) многозадачные (Unix, OS/2, Windows).

 ш1.2
    _ 1Однозадачные операционные  системы . 0  в основном выполняют функцию
предоставления пользователю виртуальной машины, делая более простым
и удобным процесс взаимодействия пользователя с компьютером.  Одно-
задачные операционные системы включают средства управления  перифе-
рийными устройствами, средства управления файлами, средства общения
с пользователем.
    _ 1Многозадачные операционные   системы . 0,   кроме  вышеперечисленных
функций, управляют разделением совместно используемых ресурсов, та-
ких как процессор, оперативная память, файлы и внешние устройства.
    22. 0  _ 1Вытесняющая и невытесняющая многозадачность . 0.
   Важнейшим разделяемым ресурсом является процессорное время. Спо-
соб  распределения процессорного времени между несколькими одновре-
менно существующими в системе  1процессами 0 (или  1нитями 0) во многом оп-
ределяет специфику операционной системы.
   Среди множества существующих вариантов реализации многозадачнос-
ти можно выделить две группы алгоритмов:
 ш1.1
   (1) невытесняющая многозадачность (NetWare, Windows 3.x);
   (2) вытесняющая многозадачность (Windows NT, OS/2, Unix).

 ш1.2
   Основным различием  между вытесняющим и невытесняющим вариантами
многозадачности является степень централизации механизма планирова-
ния процессов.  В первом случае механизм планирования процессов це-
ликом сосредоточен в операционной системе,  а во втором - распреде-
лен между системой и прикладными программами.
   При  1невытесняющей многозадачности 0 активный  процесс  выполняется
до тех пор,  пока он сам,  по собственной инициативе, не отдаст уп-
равление операционной системе для того, чтобы та выбрала из очереди
другой готовый к выполнению процесс.
   При  1вытесняющей многозадачности 0 решение о переключении процессо-
ра с одного процесса на другой принимается операционной системой, а
не самим активным процессом.
    23. 0  _ 1Поддержка многопользовательского режима . 0.
   По числу одновременно работающих пользователей операционных сис-
тем можно разделить на:
 ш1.1
   (а) однопользовательские (MS DOS, Windows 3.x);
   (б) многопользовательские (Windows NT, Unix).

 ш1.2
   Главным отличием  многопользовательских  систем от однопользова-
тельских является наличие средств защиты информации каждого пользо-
вателя от несанкционированного доступа других пользователей.
   Следует заметить,  что не всякая многозадачная система  является
многопользовательской, и не всякая однопользовательская  операцион-
ная система является однозадачной.
    24. 0  _ 1Многопроцессорная обработка . 0.
   Вплоть до  недавнего  времени  вычислительные системы имели один
центральный процессор. В результате требований к повышению произво-
дительности появились  1многопроцессорные системы 0,  состоящие из двух
и более процессоров общего назначения,  осуществляющих параллельное
выполнение команд.  Поддержка мультипроцессирования является важным
свойством операционных систем и приводит к усложнению всех алгорит-
мов управления ресурсами. Многопроцессорная обработка реализована в
таких операционных системах, как Linux, Solaris 2.x фирмы Sun, Open
Server 3.x компании Santa Crus Operations,  OS/2 фирмы IBM, Windows
NT фирмы Microsoft и NetWare 4.1 фирмы Novell.
   Многопроцессорные операционные  системы могут классифицироваться
по способу организации вычислительного процесса в системе с многоп-
роцессорной архитектурой на  1симметричные 0 и  1асимметричные 0:
 ш1.1
   (а) в   1симметричных  операционных  системах 0 на каждом процессоре
функционирует одно и то же ядро,  и задача может быть выполнена  на
любом процессоре,  т.е.  обработка полностью децентрализована.  При
этом каждому из процессоров доступна вся память;
   (б) в   1асимметричных  операционных системах 0 процессоры неравноп-
равны.  Обычно существует главный процессор (master) и  подчинённые
(slave), загрузку и характер работы которых определяет главный про-
цессор. Асимметричная   операционная  система  целиком  выполняется
только на одном из процессоров системы,  распределяя прикладные за-
дачи по остальным процессорам.

 ш1.2
    25. 0  _ 1Многопоточная обработка . 0.
   Многопоточные операционные  системы  дают  возможность разделять
процессорное время не только между процессами, но и между отдельны-
ми ветвями процессов -  _ 1потоками . 0.
    26. 0  _ 1Поддержка многонитевости . 0.
   Важным свойством операционных систем является возможность распа-
раллеливания вычислений в рамках одной задачи.
   Многонитевая операционная система разделяет  процессорное  время
не между задачами,  а между их отдельными ветвями ( _ 1нитями . 0), которые
являются минимальными единицами работы операционной системы.
    27. 0  _ 1Классические, сетевые и распределённые операционные системы . 0.
   В дальнейшем  _ 1классическими операционными системами . 0  будем  назы-
вать  1автономные операционные системы 0.
   В  _ 1сетевых операционных системах . 0 пользователи могут получить дос-
туп к ресурсам другого сетевого компьютера, только они должны знать
об их наличии и уметь это сделать.  Каждая машина в  сети  работает
под управлением своей локальной операционной системы,  отличающейся
от  операционной  системы  автономного компьютера наличием дополни-
тельных средств (программной поддержкой  для  сетевых  интерфейсных
устройств и доступа к удалённым ресурсам), но эти дополнения не ме-
няют структуру операционной системы.
    _ 1Распределённая операционная система . 0,  напротив,  внешне выглядит
как обычная автономная операционная система.  Пользователь не знает
и не должен знать,  где его файлы хранятся - на локальной или  уда-
лённой машине - и где его программы выполняются. Он может вообще не
знать, подключён ли его компьютер к сети. Внутреннее строение расп-
ределённой операционной системы имеет существенные отличия от авто-
номных систем.
   Характерными признаками распределённой организации  операционных
систем  являются:  наличие единой справочной службы разделяемых ре-
сурсов,  единой службы времени, использование механизма вызова уда-
ленных  процедур  (RPC)  для  прозрачного распределения программных
процедур по машинам,  многонитевой обработки, позволяющей распарал-
леливать  вычисления  в  рамках одной задачи и выполнять эту задачу
сразу на нескольких компьютерах сети,  а также наличие других расп-
ределенных служб.
   Таким образом,  распределённая  организация операционной системы
позволяет упростить работу пользователей и программистов в  сетевых
средах. В  распределённой операционной системе реализованы механиз-
мы,  которые дают возможность пользователю представлять и восприни-
мать сеть в виде традиционного однопроцессорного компьютера.
    28. 0  _ 1Особенности областей использования операционных систем . 0.
    _ 1Многозадачные операционные системы . 0 подразделяются на три типа  в
соответствии  с использованными при их разработке критериями эффек-
тивности:
 ш1.1
   (1) системы пакетной обработки (например, OC EC ЭВМ);
   (2) системы разделения времени (Unix, VMS);
   (3) системы реального времени (QNX, RT/11).

 ш1.2
    _ 1Системы пакетной обработки . 0 предназначались для решения  задач  в
основном вычислительного характера, не требующих быстрого получения
результатов. Главной целью и критерием эффективности систем  пакет-
ной обработки является максимальная пропускная способность, то есть
решение максимального числа задач в единицу времени.
   Для достижения этой цели в системах пакетной обработки использу-
ются следующая схема функционирования:  в начале работы формируется
пакет  заданий,  каждое задание содержит требование к системным ре-
сурсам;  из  этого  пакета  заданий  формируется  мультипрограммная
смесь, то есть множество одновременно выполняемых задач. Для однов-
ременного выполнения выбираются задачи,  предъявляющие отличающиеся
требования к ресурсам,  так,  чтобы обеспечивалась сбалансированная
загрузка всех устройств вычислительной  машины;  так,  например,  в
мультипрограммной смеси желательно одновременное присутствие вычис-
лительных задач и задач с интенсивным вводом-выводом.
   Таким образом, выбор нового задания из пакета заданий зависит от
внутренней ситуации, складывающейся в системе, т.е. выбирается "вы-
годное" задание.  Следовательно,  в таких операционных системах не-
возможно гарантировать выполнение того или иного задания в  течение
определенного периода времени.
   В системах пакетной обработки переключение процессора с выполне-
ния  одной  задачи на выполнение другой происходит только в случае,
если активная задача сама  отказывается  от  процессора,  например,
из-за  необходимости выполнить операцию ввода-вывода.  Поэтому одна
задача может надолго занять процессор,  что делает невозможным  вы-
полнение интерактивных задач.
   Таким образом,  взаимодействие пользователя с вычислительной ма-
шиной,  на которой установлена система пакетной обработки, сводится
к тому, что он приносит задание, отдает его диспетчеру-оператору, а
в  конце дня после выполнения всего пакета заданий получает резуль-
тат. Очевидно, что такой порядок снижает эффективность работы поль-
зователя.
    _ 1Системы разделения времени . 0 призваны исправить основной  недоста-
ток  систем пакетной обработки - изоляцию пользователя-программиста
от процесса выполнения его задач. Каждому пользователю системы раз-
деления времени предоставляется терминал, с которого он может вести
диалог со своей программой.  Так как в системах разделения  времени
каждой задаче выделяется только  1квант процессорного времени 0, ни од-
на задача не занимает процессор надолго, и время ответа оказывается
приемлемым. Если квант выбран достаточно небольшим, то у всех поль-
зователей,  одновременно работающих на одной и той же машине, скла-
дывается впечатление, что каждый из них единолично использует маши-
ну.
   Ясно, что системы разделения времени обладают меньшей пропускной
способностью,  чем системы пакетной обработки,  т.к.  на выполнение
принимается каждая запущенная пользователем задача,  а не та, кото-
рая "выгодна" системе, и, кроме того, имеются накладные расходы вы-
числительной мощности на более частое переключение процессора с за-
дачи на задачу.  Критерием эффективности систем разделения  времени
является  не максимальная пропускная способность,  а удобство и эф-
фективность работы пользователя.
    _ 1Системы реального  времени . 0 применяются для управления различными
техническими объектами,  такими, например, как станок, спутник, на-
учная  экспериментальная установка или технологическими процессами,
такими,  как гальваническая линия,  доменный процесс и т.п. Во всех
этих случаях существует предельно допустимое время, в течение кото-
рого должна быть выполнена та или иная программа,  управляющая объ-
ектом, в противном случае может произойти авария: спутник выйдет из
зоны видимости,  экспериментальные данные,  поступающие с датчиков,
будут потеряны, толщина гальванического покрытия не будет соответс-
твовать норме. Система должна обрабатывать поступающие данные быст-
рее,  чем они могут поступать,  причём от нескольких источников од-
новременно.
   Примером такого   приложения   может  быть  программа  бортового
компьютера  1fly-by-wire 0 (дословно - " 1летящий по проволоке 0", т.е. ис-
пользующий систему управления, в которой органы управления не имеют
механической и гидравлической связи с рулевыми плоскостями) самолё-
та, системой управления ускорителем элементарных частиц или промыш-
ленным оборудованием.  Подобные системы обязаны поддерживать много-
поточность, гарантированное время реакции на внешнее событие, прос-
той доступ к таймеру и внешним устройствам.
   Таким образом, критерием эффективности для систем реального вре-
мени является их способность выдерживать заранее заданные интервалы
времени между запуском программы и получением результата (управляю-
щего воздействия). Это время называется  _ 1временем реакции системы . 0, а
соответствующее свойство системы -  _ 1реактивностью . 0.
    1Способность гарантировать  время  реакции является отличительным
 1признаком систем реального времени 0.  Важно учитывать различие между
гарантированностью  и  просто высокой производительностью и низкими
накладными расходами.  Далеко не все алгоритмы и технические  реше-
ния,  даже и обеспечивающие отличное среднее время реакции, годятся
для приложений и операционных систем реального времени.
   Столь жёсткие ограничения сказываются на архитектуре систем  ре-
ального времени,  например,  в  них может отсутствовать виртуальная
память, поддержка которой даёт непредсказуемые задержки в  выполне-
нии программ.
    3Замечание 0 [Иртегов,2002,с.9] 3.
 ш1.1
   Так называемое " 1мягкое реальное время 0" (soft real time), предос-
тавляемое современными Win32-платформами, не является реальным вре-
менем вообще.  Система "мягкого разделения времени" обеспечивает не
гарантированное,  а всего лишь  1среднее время реакции 0. Для мультиме-
дийных  приложений  и игр различие между "средним" и "гарантирован-
ным" не очень критично - ну дёрнется картинка,  или поплывёт  звук.
Но  для промышленных приложений,  где необходимо настоящее реальное
время, это обычно неприемлемо.

 ш1.2
   Для операционных  систем  реального  времени   мультипрограммная
смесь  представляет собой фиксированный набор заранее разработанных
программ,  а выбор программы на выполнение осуществляется исходя из
текущего  состояния объекта или в соответствии с расписанием плано-
вых работ.
   Некоторые операционные системы могут совмещать в  себе  свойства
систем разных типов,  например, часть задач может выполняться в ре-
жиме пакетной обработки, а часть - в режиме реального времени или в
режиме разделения времени. В таких случаях режим пакетной обработки
часто называют  _ 1фоновым режимом . 0.
    29. 0  _ 1Особенности аппаратных платформ . 0.
   На свойства операционной системы непосредственное влияние оказы-
вают аппаратные средства, на которые она ориентирована.
   По типу  аппаратуры  различают операционные системы персональных
компьютеров,  мини-компьютеров, мейнфреймов, кластеров и сетей ЭВМ.
   Среди перечисленных  типов компьютеров могут встречаться как од-
нопроцессорные варианты,  так и многопроцессорные.  В любом  случае
специфика аппаратных средств,  как правило, отражается на специфике
операционных систем.
   Очевидно, что операционная система большой машины является более
сложной и функциональной,  чем операционная  система  персонального
компьютера.  Так  в  операционных системах больших машин функции по
планированию потока выполняемых задач,  очевидно, реализуются путём
использования  сложных приоритетных дисциплин и требуют большей вы-
числительной мощности,  чем в  операционных  системах  персональных
компьютеров. Аналогично обстоит дело и с другими функциями.
   Сетевая операционная система имеет в своем составе средства  пе-
редачи сообщений между компьютерами по линиям связи, которые совер-
шенно не нужны в автономной операционной системы.
   На основе этих сообщений сетевая операционная система  поддержи-
вает  разделение ресурсов компьютера между удалёнными пользователя-
ми,  подключенными к сети. Для поддержания функций передачи сообще-
ний сетевые  операционные  системы содержат специальные программные
компоненты,  реализующие популярные коммуникационные протоколы, та-
кие как IP, IPX, Ethernet и другие.
   Многопроцессорные системы требуют от операционной системы особой
организации,  с помощью которой сама операционная система,  а также
поддерживаемые  ею  приложения могли бы выполняться параллельно от-
дельными процессорами системы. Параллельная работа отдельных частей
операционной  системы создает дополнительные проблемы для разработ-
чиков операционных систем, т.к. в этом случае гораздо сложнее обес-
печить  согласованный  доступ отдельных процессов к общим системным
таблицам, исключить эффект гонок и прочие нежелательные последствия
асинхронного выполнения работ.
   Другие требования предъявляются к операционным системам  класте-
ров.
    _ 1Кластер . 0 -  это  слабо связанная совокупность нескольких вычисли-
тельных систем,  работающих совместно для выполнения общих приложе-
ний, и представляющихся пользователю единой системой.
   Наряду со специальной аппаратурой для функционирования  кластер-
ных систем необходима и программная поддержка со стороны операцион-
ной системы,  которая сводится в основном к синхронизации доступа к
разделяемым ресурсам, обнаружению отказов и динамической реконфигу-
рации системы. Одной из первых разработок в области кластерных тех-
нологий были решения компании Digital Equipment на базе компьютеров
VAX. Недавно этой компанией заключено соглашение с корпорацией Mic-
rosoft о разработке кластерной технологии, использующей Windows NT.
Несколько компаний предлагают кластеры на основе Unix-машин.
   Наряду с операционными системами, ориентированными на совершенно
определённый тип аппаратной платформы, существуют операционные сис-
темы,  специально разработанные таким образом, чтобы они могли быть
легко  перенесены с компьютера одного типа на компьютер другого ти-
па, так называемые  _ 1мобильные операционные системы . 0.
   Наиболее ярким  примером такой операционной системы является по-
пулярная система Unix.  В этих системах  аппаратно-зависимые  места
тщательно локализованы, так что при переносе системы на новую плат-
форму переписываются только они. Средством, облегчающем перенос ос-
тальной части операционной системы, является написание её на машин-
но-независимом языке,  например, на языке С, который и был разрабо-
тан для программирования операционных систем.
    210. 0  _ 1Особенности методов построения операционной системы . 0.
   При описании операционной системы часто указываются  особенности
ее  структурной  организации и основные концепции,  положенные в её
основу. К таким базовым концепциям относятся следующие.
    _ 1Способы построения  ядра системы . 0 ( 1монолитное ядро 0 или  1микроядер-
 1ный подход 0).  Большинство операционных систем использует  1монолитное
 1ядро 0, которое компонуется как одна программа, работающая в привиле-
гированном режиме и использующая быстрые переходы с одной процедуры
на другую, не требующие переключения из привилегированного режима в
пользовательский и наоборот.
   Альтернативой является  построение  операционных  систем на базе
 1микроядра 0, работающего также в привилегированном режиме и выполняю-
щего  только минимум функций по управлению аппаратурой,  в то время
как функции операционных систем  более  высокого  уровня  выполняют
специализированные компоненты операционной системы -  _ 1серверы . 0, рабо-
тающие в пользовательском режиме. При таком построении операционная
система  работает более медленно,  т.к.  часто выполняются переходы
между привилегированным режимом и  пользовательским,  зато  система
получается более гибкой - ее функции можно наращивать,  модифициро-
вать или сужать, добавляя, модифицируя или исключая серверы пользо-
вательского режима.  Кроме  того,  серверы  хорошо защищены друг от
друга, как и любые пользовательские процессы.
   Построение операционной системы на базе  _ 1объектно-ориентированно-
 _ 1го подхода . 0 дает возможность использовать все его достоинства, хоро-
шо зарекомендовавшие себя на уровне приложений, внутри операционной
системы,  а именно: аккумуляцию удачных решений в форме стандартных
объектов,  возможность  создания новых объектов на базе имеющихся с
помощью механизма наследования,  хорошую защиту данных за  счёт  их
инкапсуляции во внутренние структуры объекта, что делает данные не-
доступными для несанкционированного использования извне, структури-
зованность системы,  состоящей из набора хорошо определенных объек-
тов.
   Наличие нескольких прикладных сред дает возможность в рамках од-
ной операционной системы одновременно выполнять приложения,  разра-
ботанные для нескольких операционных систем.
   Многие современные операционные системы поддерживают одновремен-
но прикладные среды MS DOS, Windows, Unix (POSIX), OS/2 или хотя бы
некоторого подмножества из этого популярного набора.
   Концепция множественных прикладных сред наиболее просто реализу-
ется в операционной системе на базе микроядра, над которым работают
различные серверы, часть которых реализуют прикладную среду той или
иной операционной системы.

                    3Семейства операционных систем

 ш1.1
                     1Врач может похоронить свою ошибку, архитектор -
                     1разве 0  1что обсадить стены плющом.
                                                    1Франк Ллойд Райт
 ш1.2

   Часто можно проследить преемственность между различными операци-
онными системами, необязательно разработанными одной компанией. От-
части такая преемственность обусловлена требованиями  совместимости
или хотя бы переносимость прикладного программного обеспечения, от-
части - заимствованием отдельных удачных концепций.
   На основании  такой  преемственности можно выстроить "генеалоги-
ческие деревья" операционных систем и - с той или  иной  обоснован-
ностью -  объединять  их в семейства.  Впрочем,  в отличие от древа
происхождения биологических видов, граф родства операционных систем
не является  деревом  и нередко содержит циклы,  поэтому бесспорной
многоуровневой классификации,  похожей на линнеевскую классификацию
видов, выстроить не удаётся.
   Тем не  менее,  с достаточно большой уверенностью можно выделить
минимум  1три семейства ныне эксплуатирующихся операционных систем 0 (и
ещё несколько "вымерших") [Иртегов,2002,с.10-11]:
 ш1.1
   (1)  1системы для больших компьютеров фирмы IBM 0: OS/390,  z/OS  и
IMB VM;
   (2)  1семейство Unix 0 - обширное,  бурно  развивающееся  и  имеющее
трудно  определимые границы.  Под системами данного семейства часто
подразумеваются операционные системы трёх основных родов:
 ш1.0

   (а)  1Unix System V Release 4.x 0: Sunsoft Solaris, SCO Unixware;

   (б)  1Berkeley Software Distribution Unix 0: BSDI, FreeBSD;

   (в)  1Linux 0;

 ш1.1
   (3) семейство  прямых и косвенных потомков Control Program/Moni-
tor (CP/M) фирмы Digital Research.  В этом семействе можно выделить
весьма широко известное подсемейство Win-платформ.

 ш1.2
   Ещё одно практически "вымершее" к настоящему времени,  но  оста-
вившее  в  наследство ряд важных и интересных концепций семейство -
это операционные системы для мини- и микрокомпьютеров фирмы DEC:
 ш1.0

   RT-11, RSX-11, VAX/VMS.

 ш1.2
   Ряд систем, в том числе и коммерчески успешных, например OS/400,
не могут  быть с уверенностью отнесены ни к одному из перечисленных
семейств, поэтому к приведённой классификации надо относиться с ос-
торожностью.
    3Замечания 0 [Таненбаум,2006,с.37; Alex Workman,2005,с.18] 3.
 ш1.1
    21. 0 Автором MS DOS является  1Тим Патерсон 0 (Tim Paterson),  который
являлся одним из первых сотрудников фирмы Microsoft.
    22. 0 Последняя  версия MS DOS вышла в 1994 г.  и на этом завершила
своё развитие как самостоятельная операционная система. Последующие
версии MS DOS были основой операционных систем Windows:
 ш1.0

   (а) MS DOS 7.0 - составная часть Windows 95;
   (б) MS DOS 7.1 - составная часть Windows 95 OSR2 и Windows 98;
   (в) MS DOS 8.0 - составная часть Windows ME.

 ш1.2
          3Основные функции классических операционных систем
   Выделим  _ 1шесть  основных функций . 0,  которые выполняют классические
операционные системы:
 ш1.0

   (1) планирование заданий и использование процессора;
   (2) обеспечение программ средствами коммуникации и синхронизации;
   (3) управление памятью;
   (4) управление файловой системой;
   (5) управление вводом-выводом;
   (6) обеспечение безопасности.

 ш1.2
   Каждая из  приведённых функций обычно реализована в виде подсис-
темы,  являющейся структурным компонентом операционной  системы.  В
каждой операционной системе эти функции,  конечно,  реализовывались
по-своему, в различном объёме. Они не были изначально придуманы как
составные части операционных систем,  а появились в процессе разви-
тия,  по мере того как вычислительные системы становились всё более
удобными,  эффективными и безопасными.
   Эволюция вычислительных систем,  созданных человеком,  пошла  по
такому пути, но никто ещё не доказал, что это единственно возможный
путь их развития.  Операционные системы существуют потому,  что  на
данный  момент их существование - это разумный способ использования
вычислительных систем.
    3Замечание 0 [Таненбаум,2006,с.90-91] 3.
 ш1.1
   Хотя один подход к улучшению огромных,  содержащих массу ошибок,
ненадёжных  операционных  систем  состоит в уменьшении их размеров,
существует второй,  более радикальный метод -  _ 1вообще устранить опе-
 _ 1рационную систему . 0.  Идея состоит в том,  чтобы оставить тонкий слой
программного обеспечения,  работающего напрямую с аппаратурой,  все
действия которого заключаются в надёжном распределении ресурсов ап-
паратуры между пользователями.  Например,  оно должно решать, кто и
какую часть диска получает в пользование,  куда должны доставляться
приходящие сетевые пакеты.  Всё остальное оставляется на усмотрение
процессов пользовательского уровня, что делает возможным построение
как универсальных, так и узкоспециализированных систем.

 ш1.2
                    3Основные понятия, относящиеся
                       3к операционным системам
   В процессе эволюции возникло несколько важных концепций, которые
стали  неотъемлемой  частью  теории и практики операционных систем.
    21. 0  _ 1Системные вызовы . 0.
   В любой операционной системе  поддерживается  механизм,  который
позволяет  пользовательским  программам  обращаться  к услугам ядра
операционной системы.  Такие средства называют  1системными вызовами 0;
они говорят о том, что реально делает операционная система.
   Системные вызовы, доступные в интерфейсе, меняются от одной опе-
рационной системы  к  другой  (хотя  лежащая  в их основе концепция
практически одинакова).
    2Определение 0 (по [Таненбаум,2006,с.69]) 2.
 ш1.1
    _ 1Системные вызовы . 0  -  это интерфейс между операционной системой и
пользовательской программой.

 ш1.2
   Системные вызовы создают,  удаляют и используют различные объек-
ты,  главные из которых -  1процессы 0 и  1файлы 0.  Пользовательская прог-
рамма  запрашивает сервис у операционной системы,  осуществляя сис-
темный вызов.
   Имеются  1библиотеки процедур 0, которые загружают машинные регистры
определёнными  параметрами  и  осуществляют  прерывание процессора,
после чего управление передаётся  1обработчику данного вызова 0, входя-
щему в ядро операционной системы.
   Цель таких библиотек - сделать системный вызов похожим на  обыч-
ный  вызов  подпрограммы.  Основное отличие состоит в том,  что при
системном вызове задача переходит в  _ 1привилегированный режим . 0  ( _ 1режим
 _ 1ядра . 0).  Поэтому  системные  вызовы иногда ещё называют  _ 1программными
 _ 1прерываниями . 0,  в отличие от  _ 1аппаратных прерываний . 0 (которые чаще на-
зывают просто  _ 1прерываниями . 0).
   В этом режиме работает код ядра операционной системы, причём ис-
полняется он в адресном пространстве и в  контексте  вызвавшей  его
задачи.  Таким образом, ядро операционной системы имеет полный дос-
туп к памяти пользовательской программы,  и  при  системном  вызове
достаточно  передать  адреса одной или нескольких областей памяти с
параметрами вызова и адреса одной или  нескольких  областей  памяти
для результатов вызова.
 ш1.0

  4┌ 0───────────────────── 4┐ 0  1Системный 0  1вызов  0┌────────────────────────┐
 │  3Ядро операционной 0   │ 75 0───────── 1─── 0─ 1── 0─┤  1Программа пользователя 0 │
 │  3системы           0   │            1     0  1  0├────────────────────────┤
 │  4┌ 0───────────────── 4┐ 0 │    1Доступ 0   1     0  1  0│    Память программы    │
 │ │ 1Обработчик вызова 0├─│───────── 1────── 0─ 76 0│    пользователя        │
 │  4└ 0───────────────── 4┘ 0 │                 │                        │
  4└ 0───────────────────── 4┘ 0           1    0  1   0 └────────────────────────┘

 ш1.2
   В большинстве операционных систем системный вызов осуществляется
 1командой программного прерывания 0 (INT).  Таким образом, программное
прерывание - это синхронное событие.
    2Определение 0 ( 1более формальное 0) 2.
 ш1.1
    _ 1Системный вызов . 0  -  это  прерывание с переключением в режим ядра
операционной системы.

 ш1.2
   С понятием " 1системный вызов 0" тесно связано понятие " 1API 0".
    2Определение.
 ш1.1
    _ 1API . 0 (от англ.   1Application Program Interface 0 - " 1интерфейс  прик-
 1ладных программ 0") - это набор процедур, используемый программистами
для вызова служб операционной системы.
   В операционной  системе  Unix  для каждого системного вызова су-
ществует одна библиотечная процедура,  обычно с тем  же  названием,
которая вызывается для обращения к системному вызову.

 ш1.2
    22. 0  _ 1Прерывания . 0.
    _ 1Прерывание . 0 - это событие,  генерируемое внешним (по отношению  к
процессору) устройством.
   Посредством аппаратных  прерываний  аппаратура  либо информирует
центральный процессор о том, что произошло какое-либо событие, тре-
бующее немедленной реакции (например,  пользователь нажал клавишу),
либо сообщает о завершении асинхронной операции ввода-вывода  (нап-
ример, закончено чтение данных с диска в основную память).
   Важный тип аппаратных прерываний - прерывания  таймера,  которые
генерируются  периодически  через фиксированный промежуток времени.
Прерывания таймера используются операционной системой при  планиро-
вании процессов. Каждый тип аппаратных прерываний имеет собственный
номер, однозначно определяющий источник прерывания.
   Аппаратное прерывание - это  _ 1асинхронное событие . 0, т.е. оно возни-
кает вне зависимости от того,  какой код выполняется процессором  в
данный  момент.  Обработка  аппаратного прерывания не должна учиты-
вать, какой процесс является текущим.
    23. 0  _ 1Исключительные ситуации . 0.
    _ 1Исключительная ситуация . 0 - это событие,  возникающее в результате
попытки выполнения программой команды, которая по каким-то причинам
не может быть выполнена до конца.
   Примерами таких команд могут быть попытки доступа к ресурсу  при
отсутствии достаточных  привилегий  или  обращения  к отсутствующей
странице памяти.
   Исключительные ситуации,  как и системные вызовы, являются синх-
ронными событиями,  возникающими в контексте текущей задачи. Исклю-
чительные ситуации можно разделить на исправимые и неисправимые.
   К  _ 1исправимым  исключительным  ситуациям . 0 относятся такие исключи-
тельные ситуации,  как отсутствие нужной информации  в  оперативной
памяти. После устранения причины исправимой исключительной ситуации
программа может выполняться дальше. Возникновение в процессе работы
операционной  системы  исправимых исключительных ситуаций считается
нормальным явлением.
    _ 1Неисправимые исключительные ситуации . 0 чаще всего возникают в  ре-
зультате ошибок в программах (например, деление на 0). Обычно в та-
ких случаях операционная система реагирует  завершением  программы,
вызвавшей исключительную ситуацию.
    24. 0  _ 1Файлы . 0.
    2Определение.
 ш1.1
    _ 1Файлом . 0 называется именованную часть пространства на носителе ин-
формации.

 ш1.2
   Файлы предназначены  для  хранения информации на внешних носите-
лях,  т.е. принято, что информация, записанная, например, на диске,
должна находиться "внутри" файла.
    _ 1Главной задачей файловой системы . 0 является  скрытие  особенностей
ввода-вывода и  предоставления программисту простой абстрактной мо-
дели файлов, независимых от устройств.
   Для чтения, создания, удаления, записи, открытия и закрытия фай-
лов также имеется обширная категория системных  вызовов  (создание,
удаление, открытие, закрытие, чтение и т.д.).
   Пользователям хорошо знакомы такие связанные с организацией фай-
ловой системы понятия,  как " 1каталог 0", " 1текущий каталог 0", " 1корневой
 1каталог 0", " 1путь 0". Для манипулирования такими объектами в операцион-
ной системе имеются системные вызовы.
    25. 0  _ 1Процессы и нити . 0.
    1Концепция процесса 0 в операционных системах является одной из на-
иболее фундаментальных.
